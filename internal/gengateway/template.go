package gengateway

import (
	"bytes"
	"text/template"

	"github.com/golang/glog"
	"github.com/guggero/protoc-gen-rest-metadata/descriptor"
	"github.com/guggero/protoc-gen-rest-metadata/internal/casing"
)

type param struct {
	*descriptor.File
	Imports            []descriptor.GoPackage
	UseRequestContext  bool
	RegisterFuncSuffix string
	AllowPatchFeature  bool
	OmitPackageDoc     bool
}

type trailerParams struct {
	PackageName        string
	Services           []*descriptor.Service
	UseRequestContext  bool
	RegisterFuncSuffix string
	AssumeColonVerb    bool
}

func applyTemplate(p param, reg *descriptor.Registry) (string, error) {
	w := bytes.NewBuffer(nil)
	if err := headerTemplate.Execute(w, p); err != nil {
		return "", err
	}
	var targetServices []*descriptor.Service

	for _, msg := range p.Messages {
		msgName := casing.Camel(*msg.Name)
		msg.Name = &msgName
	}
	for _, svc := range p.Services {
		var methodWithBindingsSeen bool
		svcName := casing.Camel(*svc.Name)
		svc.Name = &svcName
		for _, meth := range svc.Methods {
			glog.V(2).Infof("Processing %s.%s", svc.GetName(), meth.GetName())
			methName := casing.Camel(*meth.Name)
			meth.Name = &methName
			for range meth.Bindings {
				methodWithBindingsSeen = true
			}
		}
		if methodWithBindingsSeen {
			targetServices = append(targetServices, svc)
		}
	}
	if len(targetServices) == 0 {
		return "", errNoTargetService
	}

	assumeColonVerb := true
	if reg != nil {
		assumeColonVerb = !reg.GetAllowColonFinalSegments()
	}
	tp := trailerParams{
		PackageName:        p.File.GoPkg.Name,
		Services:           targetServices,
		UseRequestContext:  p.UseRequestContext,
		RegisterFuncSuffix: p.RegisterFuncSuffix,
		AssumeColonVerb:    assumeColonVerb,
	}

	if err := trailerTemplate.Execute(w, tp); err != nil {
		return "", err
	}
	return w.String(), nil
}

var (
	headerTemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-rest-metadata. DO NOT EDIT.
// source: {{.GetName}}

{{if not .OmitPackageDoc}}/*
Package {{.GoPkg.Name}} contains REST metadata.
*/{{end}}
package {{.GoPkg.Name}}
import (
	{{range $i := .Imports}}{{if $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}

	{{range $i := .Imports}}{{if not $i.Standard}}{{$i | printf "%s\n"}}{{end}}{{end}}
)
`))

	trailerTemplate = template.Must(template.New("trailer").Parse(`
{{$UseRequestContext := .UseRequestContext}}
{{range $svc := .Services}}
// Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Metadata registers the http
// handler metadata for service {{$svc.GetName}}.
func Register{{$svc.GetName}}{{$.RegisterFuncSuffix}}Metadata(targetMap map[string]struct{
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}) {
	{{range $m := $svc.Methods}}
	{{range $b := $m.Bindings}}
	targetMap["/{{$.PackageName}}.{{$svc.GetName}}/{{$m.GetName}}"] = struct{
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: {{- if .Method.GetClientStreaming }}true{{- else -}}false{{- end}},
		ServerStreaming: {{- if .Method.GetServerStreaming }}true{{- else -}}false{{- end}},
		Method:          {{$b.HTTPMethod | printf "%q"}},
		Pattern:         runtime.MustPattern(runtime.NewPattern({{$b.PathTmpl.Version}}, {{$b.PathTmpl.OpCodes | printf "%#v"}}, {{$b.PathTmpl.Pool | printf "%#v"}}, {{$b.PathTmpl.Verb | printf "%q"}}, runtime.AssumeColonVerbOpt({{$.AssumeColonVerb}}))),
	}
	{{end}}
	{{end}}
}
{{end}}`))
)